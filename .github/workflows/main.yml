name: Deploy revised app to Kubernetes

on:
  push:
    branches: [master]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  pull-requests: read

jobs:
  SonarCloudAnalysis:
    runs-on: ubuntu-latest

    steps:
      - name: Analyze with SonarCloud

        # You can pin the exact commit or the version.
        # uses: SonarSource/sonarcloud-github-action@de2e56b42aa84d0b1c5b622644ac17e505c9a049
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
        with:
          # Additional arguments for the sonarcloud scanner
          args:
            # Unique keys of your project and organization. You can find them in SonarCloud > Information (bottom-left menu)
            # mandatory
            -Dsonar.projectKey=eli-devops-training_rtproject
            -Dsonar.organization=eli-devops-training
            # Comma-separated paths to directories containing main source files.
            #-Dsonar.sources=. \
            #-Dsonar.host.url=https://sonarcloud.io # optional, default is project base directory
            # When you need the analysis to take place in a directory other than the one from which it was launched
            #-Dsonar.projectBaseDir= # optional, default is .
            # Comma-separated paths to directories containing test source files.
            #-Dsonar.tests= # optional. For more info about Code Coverage, please refer to https://docs.sonarcloud.io/enriching/test-coverage/overview/
            # Adds more detail to both client and server-side analysis logs, activating DEBUG mode for the scanner, and adding client-side environment variables and system properties to the server-side log of analysis report processing.
            #-Dsonar.verbose= # optional, default is false

  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU (optional, for multi-arch builds)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx (optional, for multi-arch builds)
        uses: docker/setup-buildx-action@v3

      - name: Extract version from commit message and update Deployment
        run: |
          VERSION=$(git log -1 --pretty=%B | grep -Eo '[0-9]+\.[0-9]+')  # Capture digits separated by a dot
          if [[ -z "$VERSION" ]]; then
            echo "No version found in commit message. Using 'latest' tag."
            VERSION="latest"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV  # Set environment variable

      - name: Calculate last major version
        id: last_major_version
        run: |
          MAJOR_VERSION=$(echo "${{ env.VERSION }}" | cut -d'.' -f1)
          LAST_MAJOR_VERSION=$((MAJOR_VERSION - 1))
          echo "::set-output name=LAST_MAJOR_VERSION::$LAST_MAJOR_VERSION"

      - name: Delete Docker Hub images up to last major version
        run: |
          docker image ls --format '{{.Repository}}:{{.Tag}}' | grep '${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.APP_NAME }}:'"$LAST_MAJOR_VERSION"'\.' | xargs -I {} docker image rm {}

      - name: Build Docker Image
        uses: docker/build-push-action@v3
        with:
          push: true
          platforms: linux/arm64 
          tags: "${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.APP_NAME }}:${{ env.VERSION }}"

      - name: Pull and Deploy App
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_MACHINE_IP }}
          username: ${{ secrets.REMOTE_MACHINE_USER }}
          key: ${{ secrets.REMOTE_MACHINE_KEY }}
          port: ${{ secrets.REMOTE_MACHINE_PORT }}
          script: |
            git pull https://github.com/eli-pavlov/realtime-cicd-project.git
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.APP_NAME }}:${{ env.VERSION }}
            sed -i "s|elipavlov/rtproject:latest|elipavlov/rtproject:${{ env.VERSION }}|g" ./deployment.yaml
            sed -i "s|version: \"latest\"|version: \"${{ env.VERSION }}\"|g" ./deployment.yaml
            echo "Modified deployment.yaml with version: ${{ env.VERSION }}"
            kubectl apply -f deployment.yaml
            git reset --hard HEAD   # Reset working directory to last commit
