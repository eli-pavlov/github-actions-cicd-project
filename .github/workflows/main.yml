name: CI/CD Pipeline

on:
  push:
    branches: [development, main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  pull-requests: read

jobs:
  Lint-and-Test:
    runs-on: ubuntu-latest
    outputs:
      coverage-generated: ${{ steps.tests.outcome }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest coverage flake8

      - name: Run flake8 linting
        run: flake8 src/app.py

      - name: Run unit tests with coverage
        id: tests
        run: |
          coverage run -m pytest tests/
          coverage xml

  SonarCloud-CodeQuality-Analysis:
    runs-on: ubuntu-latest
    needs: Lint-and-Test
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze with SonarCloud
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.python.version=3.9
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.verbose=true

  SNYK-StaticSecurity-Analysis:
    runs-on: ubuntu-latest
    needs: Lint-and-Test
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Run Snyk to check IAC files for issues
        uses: snyk/actions/iac@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --report

  Build-and-deploy:
    runs-on: ubuntu-latest
    needs: [SonarCloud-CodeQuality-Analysis, SNYK-StaticSecurity-Analysis]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: '20.0'

      - name: Set application version
        run: |
          VERSION=$(git log -1 --pretty=%B | grep -Eo '[0-9]+\.[0-9]+' | head -n 1)
          if [[ -z "$VERSION" ]]; then
            VERSION=$(git rev-parse --short HEAD)
            echo "No version found in commit. Using commit SHA: $VERSION"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Multi-Arch Docker Image
        uses: docker/build-push-action@v4
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.APP_NAME }}:latest

  Notify-Slack:
    runs-on: ubuntu-latest
    if: always()
    needs: Build-and-deploy
    steps:
      - name: Send Slack Notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          STATUS="${{ needs.Build-and-deploy.result }}"
          if [[ "$STATUS" == "success" ]]; then
            COLOR="#36a64f"
            MESSAGE="✅ *Build and deploy succeeded* on *${{ github.ref_name }}*"
          elif [[ "$STATUS" == "failure" ]]; then
            COLOR="#ff0000"
            MESSAGE="❌ *Build or deploy failed* on *${{ github.ref_name }}*"
          else
            COLOR="#cccccc"
            MESSAGE="ℹ️ *Build result: $STATUS* on *${{ github.ref_name }}*"
          fi

          curl -X POST -H 'Content-type: application/json' \
            --data "{\"attachments\":[{\"color\":\"$COLOR\",\"text\":\"$MESSAGE\"}]}" \
            $SLACK_WEBHOOK_URL

