name: Deploy revised app to Kubernetes

on:
  push:
    branches: [master]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  pull-requests: read

jobs:
  SonarCloud-CodeQuality-Analysis:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Analyze with SonarCloud

        uses: SonarSource/sonarcloud-github-action@master
        env:
          AWS_API_KEY: "dwndoo23423492y349283409827348"
          AWS_SECRET_KEY: "dmohr9318y49q3h9u3092y0932h9f3"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
        with:
          # Additional arguments for the sonarcloud scanner
          args:
            -Dsonar.projectKey=eli-devops-training_rtproject
            -Dsonar.organization=eli-devops-training
            -Dsonar.PythonVersion=3.9

  SNYK-StaticSecurity-Analysis:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
        - name: Run Snyk to check IAC files for issues
          uses: snyk/actions/iac@master
          continue-on-error: true
          env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          with:
            args: --report
            command: monitor

  Build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU (optional, for multi-arch builds)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx (optional, for multi-arch builds)
        uses: docker/setup-buildx-action@v3

      - name: Extract app version from commit message
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
          VERSION=$(git log -1 --pretty=%B | grep -Eo '[0-9]+\.[0-9]+')  # Capture digits separated by a dot
            if [[ -z "$VERSION" ]]; then
              echo "No version found in commit message. Using 'latest' tag."
              VERSION="latest"
            fi
            echo "VERSION=$VERSION" >> $GITHUB_ENV  # Set environment variable #
          
      - name: Build Docker Image
        uses: docker/build-push-action@v3
        with:
          push: true
          platforms: linux/arm64 
          tags: "${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.APP_NAME }}:latest"

      - name: Pull and Deploy App
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_MACHINE_IP }}
          username: ${{ secrets.REMOTE_MACHINE_USER }}
          key: ${{ secrets.REMOTE_MACHINE_KEY }}
          port: ${{ secrets.REMOTE_MACHINE_PORT }}
          script: |
            git pull https://github.com/eli-pavlov/realtime-cicd-project.git
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.APP_NAME }}:latest
            # sed -i "s|elipavlov/rtproject:latest|elipavlov/rtproject:${{ env.VERSION }}|g" ./deployment.yaml
            sed -i "s|version: \"latest\"|version: \"${{ env.VERSION }}\"|g" ./deployment.yaml
            echo "Modified deployment.yaml with version: ${{ env.VERSION }}"
            kubectl apply -f deployment.yaml
            git reset --hard HEAD   # Reset working directory to last commit
 